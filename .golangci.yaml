version: "2" # 配置文件版本，golangci-lint 当前使用的版本格式

linters: # 配置要启用或禁用的 linter
  default: standard # 默认 linter 集合，"standard" 是一组推荐的 linter
  enable: # 显式启用的 linter 列表
    - staticcheck # 启用 staticcheck，检测静态分析问题
    - govet # 启用 govet，检测潜在代码问题
    - errcheck # 启用 errcheck，检查错误返回值是否被忽略
    - revive # 启用 revive，可自定义代码风格规则
  disable: # 显式禁用的 linter 列表
    - funlen # 禁用 funlen，函数长度检测
    - gocyclo # 禁用 gocyclo，函数复杂度检测

formatters: # 格式化工具相关配置
  enable: # 启用的格式化工具列表
    - gofmt # 启用 gofmt，官方的 Go 代码格式化工具
    - gofumpt # 启用 gofumpt，更严格的代码格式化工具
    - goimports # 启用 goimports，自动添加/移除 import
    - gci # 启用 gci，自动整理 import 顺序
    - golines # 启用 golines，自动换行控制工具
  settings: # 格式化工具的详细配置
    golines: # golines 配置
      max-len: 120 # 每行代码的最大长度限制为 120 字符
    gci: # gci 配置
      sections: # import 分组规则
        - Standard # 标准库 import
        - Default # 默认 import
        - Prefix(github.com/lin-snow/ech0) # 自定义前缀的 import 分组

issues: # 关于 linter 问题的处理配置
  fix: true # 是否自动修复可修复的 lint 问题
  max-issues-per-linter: 0 # 每个 linter 允许报告的问题最大数量，0 表示不限
  max-same-issues: 0 # 同类问题的最大数量，0 表示不限
  new: true # 仅检测新增问题
  new-from-merge-base: main # 新问题检测的基准分支为 main
  whole-files: true # 对整个文件进行检查，而不仅仅是修改部分

run: # golangci-lint 执行相关配置
  timeout: 5m # 每次 lint 的超时时间，5 分钟
  tests: true # 是否检查测试文件
  relative-path-mode: gomod # 相对路径模式，使用 go module 模式
  concurrency: 4 # 并发执行 linter 的数量
  go: "1.25.1" # 指定使用的 Go 版本

output: # 输出相关配置
  formats: # 输出格式配置
    text: # 文本格式输出
      colors: true # 启用彩色输出，方便阅读
  show-stats: false # 是否显示 lint 统计信息，false 表示不显示
